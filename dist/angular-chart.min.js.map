{"version":3,"sources":["angular-chart.js"],"names":["factory","exports","module","angular","require","Chart","define","amd","Error","ChartJsProvider","options","responsive","ChartJs","getOptions","type","typeOptions","extend","this","setOptions","customOptions","merge","defaults","$get","ChartJsFactory","$timeout","createChart","scope","elem","getChartOptions","hasData","canDisplay","cvs","ctx","getContext","chartGetColor","getChartColorFn","data","getChartData","destroyChart","chart","plugins","chartPlugins","$emit","bindEvents","canUpdateChart","newVal","oldVal","length","Array","isArray","every","element","index","reduce","sum","carry","val","getEventHandler","action","triggerOnlyOnChange","lastState","point","points","evt","atEvent","getElementAtEvent","getPointAtEvent","atEvents","getElementsAtEvent","getPointsAtEvent","call","equals","getColors","colors","copy","chartColors","global","notEnoughColors","chartData","push","map","convertColor","color","getColor","rgbStringToRgb","hexToRgb","substr","getRandomColor","getRandomInt","alpha","slice","backgroundColor","rgba","pointBackgroundColor","pointHoverBackgroundColor","borderColor","pointBorderColor","pointHoverBorderColor","min","max","Math","floor","random","useExcanvas","join","concat","hex","bigint","parseInt","r","g","b","match","split","Number","getDataSets","chartLabels","chartSeries","chartDatasetOverride","getData","labels","series","datasetOverride","datasets","item","i","dataset","label","chartType","Object","keys","forEach","key","d","undefined","hoverBackgroundColor","chartOptions","onclick","chartClick","noop","onmousemove","chartHover","updateChart","values","update","isEmpty","value","clientHeight","destroy","restrict","link","watchData","watchOther","watchUpdate","watchType","window","G_vmlCanvasManager","initElement","$watch","$on","resize","multiTooltipTemplate","tooltips","mode","elements","line","borderWidth","rectangle","legend","display","animation","provider","directive","name"],"mappings":"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","file":"angular-chart.min.js","sourcesContent":["(function (factory) {\n  'use strict';\n  if (typeof exports === 'object') {\n    // Node/CommonJS\n    module.exports = factory(\n      typeof angular !== 'undefined' ? angular : require('angular'),\n      typeof Chart !== 'undefined' ? Chart : require('chart.js'));\n  }  else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['angular', 'chart'], factory);\n  } else {\n    // Browser globals\n    if (typeof angular === 'undefined') {\n      throw new Error('AngularJS framework needs to be included, see https://angularjs.org/');\n    } else if (typeof Chart === 'undefined') {\n      throw new Error('Chart.js library needs to be included, see http://jtblin.github.io/angular-chart.js/');\n    }\n    factory(angular, Chart);\n  }\n}(function (angular, Chart) {\n  'use strict';\n\n  Chart.defaults.global.multiTooltipTemplate = '<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>';\n  Chart.defaults.global.tooltips.mode = 'label';\n  Chart.defaults.global.elements.line.borderWidth = 2;\n  Chart.defaults.global.elements.rectangle.borderWidth = 2;\n  Chart.defaults.global.legend.display = false;\n  Chart.defaults.global.colors = [\n    '#97BBCD', // blue\n    '#DCDCDC', // light grey\n    '#F7464A', // red\n    '#46BFBD', // green\n    '#FDB45C', // yellow\n    '#949FB1', // grey\n    '#4D5360'  // dark grey\n  ];\n\n  var useExcanvas = typeof window.G_vmlCanvasManager === 'object' &&\n    window.G_vmlCanvasManager !== null &&\n    typeof window.G_vmlCanvasManager.initElement === 'function';\n\n  if (useExcanvas) Chart.defaults.global.animation = false;\n\n  return angular.module('chart.js', [])\n    .provider('ChartJs', ChartJsProvider)\n    .factory('ChartJsFactory', ['ChartJs', '$timeout', ChartJsFactory])\n    .directive('chartBase', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory(); }])\n    .directive('chartLine', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('line'); }])\n    .directive('chartBar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('bar'); }])\n    .directive('chartHorizontalBar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('horizontalBar'); }])\n    .directive('chartRadar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('radar'); }])\n    .directive('chartDoughnut', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('doughnut'); }])\n    .directive('chartPie', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('pie'); }])\n    .directive('chartPolarArea', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('polarArea'); }])\n    .directive('chartBubble', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('bubble'); }])\n    .name;\n\n  /**\n   * Wrapper for chart.js\n   * Allows configuring chart js using the provider\n   *\n   * angular.module('myModule', ['chart.js']).config(function(ChartJsProvider) {\n   *   ChartJsProvider.setOptions({ responsive: false });\n   *   ChartJsProvider.setOptions('Line', { responsive: true });\n   * })))\n   */\n  function ChartJsProvider () {\n    var options = { responsive: true };\n    var ChartJs = {\n      Chart: Chart,\n      getOptions: function (type) {\n        var typeOptions = type && options[type] || {};\n        return angular.extend({}, options, typeOptions);\n      }\n    };\n\n    /**\n     * Allow to set global options during configuration\n     */\n    this.setOptions = function (type, customOptions) {\n      // If no type was specified set option for the global object\n      if (! customOptions) {\n        customOptions = type;\n        options = angular.merge(options, customOptions);\n      } else {\n        // Set options for the specific chart\n        options[type] = angular.merge(options[type] || {}, customOptions);\n      }\n\n      angular.merge(ChartJs.Chart.defaults, options);\n    };\n\n    this.$get = function () {\n      return ChartJs;\n    };\n  }\n\n  function ChartJsFactory (ChartJs, $timeout) {\n    return function chart (type) {\n      return {\n        restrict: 'CA',\n        scope: {\n          chartGetColor: '=?',\n          chartType: '=',\n          chartData: '=?',\n          chartLabels: '=?',\n          chartOptions: '=?',\n          chartSeries: '=?',\n          chartColors: '=?',\n          chartClick: '=?',\n          chartHover: '=?',\n          chartDatasetOverride: '=?',\n          chartPlugins: '=?'\n        },\n        link: function (scope, elem/*, attrs */) {\n          if (useExcanvas) window.G_vmlCanvasManager.initElement(elem[0]);\n\n          // Order of setting \"watch\" matter\n          scope.$watch('chartData', watchData, true);\n          scope.$watch('chartSeries', watchOther, true);\n          scope.$watch('chartLabels', watchOther, true);\n          scope.$watch('chartOptions', watchOther, true);\n          scope.$watch('chartColors', watchOther, true);\n          scope.$watch('chartDatasetOverride', watchOther, true);\n          scope.$watch('chartType', watchType, false);\n\n          scope.$on('$destroy', function () {\n            destroyChart(scope);\n          });\n\n          scope.$on('$resize', function () {\n            if (scope.chart) scope.chart.resize();\n          });\n\n          scope.$on('$chartUpdate', watchUpdate);\n\n          function watchData (newVal, oldVal) {\n            if (! newVal || ! newVal.length || (Array.isArray(newVal[0]) && ! newVal[0].length)) {\n              destroyChart(scope);\n              return;\n            }\n            var chartType = type || scope.chartType;\n            if (! chartType) return;\n\n            if (scope.chart && canUpdateChart(newVal, oldVal))\n              return updateChart(newVal, scope);\n\n            createChart(chartType, scope, elem);\n          }\n\n          function watchOther (newVal, oldVal) {\n            if (isEmpty(newVal)) return;\n            if (angular.equals(newVal, oldVal)) return;\n            var chartType = type || scope.chartType;\n            if (! chartType) return;\n\n            // chart.update() doesn't work for series and labels\n            // so we have to re-create the chart entirely\n            createChart(chartType, scope, elem);\n          }\n\n          function watchUpdate() {\n            if(scope.chart){\n              scope.chart.update();\n              scope.$emit('chart-update', scope.chart);\n            }\n          }\n\n          function watchType (newVal, oldVal) {\n            if (isEmpty(newVal)) return;\n            if (angular.equals(newVal, oldVal)) return;\n            createChart(newVal, scope, elem);\n          }\n        }\n      };\n    };\n\n    function createChart (type, scope, elem) {\n      var options = getChartOptions(type, scope);\n      if (! hasData(scope) || ! canDisplay(type, scope, elem, options)) return;\n\n      var cvs = elem[0];\n      var ctx = cvs.getContext('2d');\n\n      scope.chartGetColor = getChartColorFn(scope);\n      var data = getChartData(type, scope);\n      // Destroy old chart if it exists to avoid ghost charts issue\n      // https://github.com/jtblin/angular-chart.js/issues/187\n      destroyChart(scope);\n\n      scope.chart = new ChartJs.Chart(ctx, {\n        type: type,\n        data: data,\n        options: options,\n        plugins: scope.chartPlugins\n      });\n      scope.$emit('chart-create', scope.chart);\n      bindEvents(cvs, scope);\n    }\n\n    function canUpdateChart (newVal, oldVal) {\n      if (newVal && oldVal && newVal.length && oldVal.length) {\n        return Array.isArray(newVal[0]) ?\n          newVal.length === oldVal.length && newVal.every(function (element, index) {\n            return element.length === oldVal[index].length; }) :\n          oldVal.reduce(sum, 0) > 0 ? newVal.length === oldVal.length : false;\n      }\n      return false;\n    }\n\n    function sum (carry, val) {\n      return carry + val;\n    }\n\n    function getEventHandler (scope, action, triggerOnlyOnChange) {\n      var lastState = {\n        point: void 0,\n        points: void 0\n      };\n      return function (evt) {\n        var atEvent = scope.chart.getElementAtEvent || scope.chart.getPointAtEvent;\n        var atEvents = scope.chart.getElementsAtEvent || scope.chart.getPointsAtEvent;\n        if (atEvents) {\n          var points = atEvents.call(scope.chart, evt);\n          var point = atEvent ? atEvent.call(scope.chart, evt)[0] : void 0;\n\n          if (triggerOnlyOnChange === false ||\n            (! angular.equals(lastState.points, points) && ! angular.equals(lastState.point, point))\n          ) {\n            lastState.point = point;\n            lastState.points = points;\n            scope[action](points, evt, point);\n          }\n        }\n      };\n    }\n\n    function getColors (type, scope) {\n      var colors = angular.copy(scope.chartColors ||\n        ChartJs.getOptions(type).chartColors ||\n        Chart.defaults.global.colors\n      );\n      var notEnoughColors = colors.length < scope.chartData.length;\n      while (colors.length < scope.chartData.length) {\n        colors.push(scope.chartGetColor());\n      }\n      // mutate colors in this case as we don't want\n      // the colors to change on each refresh\n      if (notEnoughColors) scope.chartColors = colors;\n      return colors.map(convertColor);\n    }\n\n    function convertColor (color) {\n      // Allows RGB and RGBA colors to be input as a string: e.g.: \"rgb(159,204,0)\", \"rgba(159,204,0, 0.5)\"\n      if (typeof color === 'string' && color[0] === 'r') return getColor(rgbStringToRgb(color));\n      // Allows hex colors to be input as a string.\n      if (typeof color === 'string' && color[0] === '#') return getColor(hexToRgb(color.substr(1)));\n      // Allows colors to be input as an object, bypassing getColor() entirely\n      if (typeof color === 'object' && color !== null) return color;\n      return getRandomColor();\n    }\n\n    function getRandomColor () {\n      var color = [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n      return getColor(color);\n    }\n\n    function getColor (color) {\n      var alpha = color[3] || 1;\n      color = color.slice(0, 3);\n      return {\n        backgroundColor: rgba(color, 0.2),\n        pointBackgroundColor: rgba(color, alpha),\n        pointHoverBackgroundColor: rgba(color, 0.8),\n        borderColor: rgba(color, alpha),\n        pointBorderColor: '#fff',\n        pointHoverBorderColor: rgba(color, alpha)\n      };\n    }\n\n    function getRandomInt (min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    function rgba (color, alpha) {\n      // rgba not supported by IE8\n      return useExcanvas ? 'rgb(' + color.join(',') + ')' : 'rgba(' + color.concat(alpha).join(',') + ')';\n    }\n\n    // Credit: http://stackoverflow.com/a/11508164/1190235\n    function hexToRgb (hex) {\n      var bigint = parseInt(hex, 16),\n        r = (bigint >> 16) & 255,\n        g = (bigint >> 8) & 255,\n        b = bigint & 255;\n\n      return [r, g, b];\n    }\n\n    function rgbStringToRgb (color) {\n      var match = color.match(/^rgba?\\(([\\d,.]+)\\)$/);\n      if (! match) throw new Error('Cannot parse rgb value');\n      color = match[1].split(',');\n      return color.map(Number);\n    }\n\n    function hasData (scope) {\n      return scope.chartData && scope.chartData.length;\n    }\n\n    function getChartColorFn (scope) {\n      return typeof scope.chartGetColor === 'function' ? scope.chartGetColor : getRandomColor;\n    }\n\n    function getChartData (type, scope) {\n      var colors = getColors(type, scope);\n      return Array.isArray(scope.chartData[0]) ?\n        getDataSets(scope.chartLabels, scope.chartData, scope.chartSeries || [], colors, scope.chartDatasetOverride) :\n        getData(scope.chartLabels, scope.chartData, colors, scope.chartDatasetOverride, scope);\n    }\n\n    function getDataSets (labels, data, series, colors, datasetOverride) {\n      return {\n        labels: labels,\n        datasets: data.map(function (item, i) {\n          var dataset = angular.extend({}, colors[i], {\n            label: series[i],\n            data: item\n          });\n          if (datasetOverride && datasetOverride.length >= i) {\n            angular.merge(dataset, datasetOverride[i]);\n          }\n          return dataset;\n        })\n      };\n    }\n\n    function getData (labels, data, colors, datasetOverride, scope) {\n      var dataset;\n      if(scope.chartType){\n        dataset = {\n          labels: labels,\n          datasets: [{\n            data: data\n          }]\n        };\n        scope.chartColors.slice(0, 1).map(function (color) {\n          Object.keys(color).forEach(function (key) {\n            var d = dataset.datasets[0][key];\n            if (d === undefined) {\n              d = dataset.datasets[0][key] = color[key];\n            }\n          });\n        });\n      }else{\n        dataset = {\n          labels: labels,\n          datasets: [{\n            data: data,\n            backgroundColor: colors.map(function (color) {\n              return color.pointBackgroundColor;\n            }),\n            hoverBackgroundColor: colors.map(function (color) {\n              return color.backgroundColor;\n            })\n          }]\n        };\n      }\n\n      if (datasetOverride) {\n        angular.merge(dataset.datasets[0], datasetOverride);\n      }\n      return dataset;\n    }\n\n    function getChartOptions (type, scope) {\n      return angular.extend({}, ChartJs.getOptions(type), scope.chartOptions);\n    }\n\n    function bindEvents (cvs, scope) {\n      cvs.onclick = scope.chartClick ? getEventHandler(scope, 'chartClick', false) : angular.noop;\n      cvs.onmousemove = scope.chartHover ? getEventHandler(scope, 'chartHover', true) : angular.noop;\n    }\n\n    function updateChart (values, scope) {\n      if (Array.isArray(scope.chartData[0])) {\n        scope.chart.data.datasets.forEach(function (dataset, i) {\n          dataset.data = values[i];\n        });\n      } else {\n        scope.chart.data.datasets[0].data = values;\n      }\n\n      scope.chart.update();\n      scope.$emit('chart-update', scope.chart);\n    }\n\n    function isEmpty (value) {\n      return ! value ||\n        (Array.isArray(value) && ! value.length) ||\n        (typeof value === 'object' && ! Object.keys(value).length);\n    }\n\n    function canDisplay (type, scope, elem, options) {\n      // TODO: check parent?\n      if (options.responsive && elem[0].clientHeight === 0) {\n        $timeout(function () {\n          createChart(type, scope, elem);\n        }, 50, false);\n        return false;\n      }\n      return true;\n    }\n\n    function destroyChart(scope) {\n      if(! scope.chart) return;\n      scope.chart.destroy();\n      scope.$emit('chart-destroy', scope.chart);\n    }\n  }\n}));\n"]}